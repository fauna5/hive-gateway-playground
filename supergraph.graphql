schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
    
    
    
    
    
    
    @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@transport", "@extraSchemaDefinitionDirective", "@httpOperation"]
)
  {
    query: Query
    
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  
  
enum join__Graph {
  GRAPH @join__graph(name: "Graph", url: "http://localhost:3000/graphql") 
  OPEN_API @join__graph(name: "OpenAPI", url: "") 
}

directive @transport(
  kind: String!
  subgraph: String!
  location: String!
  headers: [[String]]
  options: TransportOptions
  queryStringOptions: ObjMap
  queryParams: [[String]]
) repeatable on SCHEMA

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: [[String]]
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
  jsonApiFields: Boolean
  queryStringOptions: ObjMap
) repeatable on FIELD_DEFINITION

scalar TransportOptions @join__type(graph: GRAPH) 

scalar _DirectiveExtensions @join__type(graph: GRAPH)  @join__type(graph: OPEN_API) 

scalar ObjMap @join__type(graph: OPEN_API) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{kind: "http", subgraph: "Graph", location: "http://localhost:3000/graphql", headers: [["Authorization", "{context.headers['authorization']}"]], options: {}}]}
) @extraSchemaDefinitionDirective(directives: {transport: [{subgraph: "OpenAPI", kind: "rest"}]})  @join__type(graph: GRAPH)  @join__type(graph: OPEN_API)  {
  hello: String @join__field(graph: GRAPH) 
  """
  Get nested data
  """
  getData: getData_200_response @httpOperation(
    subgraph: "OpenAPI"
    path: "/data"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: OPEN_API) 
}

type getData_200_response @join__type(graph: OPEN_API)  {
  field1: query_getData_field1!
}

type query_getData_field1 @join__type(graph: OPEN_API)  {
  subfield1: query_getData_field1_subfield1!
}

type query_getData_field1_subfield1 @join__type(graph: OPEN_API)  {
  leafNode1: String
  leafNode2: String!
  leafnode3: String!
}

enum HTTPMethod @join__type(graph: OPEN_API)  {
  GET @join__enumValue(graph: OPEN_API) 
  HEAD @join__enumValue(graph: OPEN_API) 
  POST @join__enumValue(graph: OPEN_API) 
  PUT @join__enumValue(graph: OPEN_API) 
  DELETE @join__enumValue(graph: OPEN_API) 
  CONNECT @join__enumValue(graph: OPEN_API) 
  OPTIONS @join__enumValue(graph: OPEN_API) 
  TRACE @join__enumValue(graph: OPEN_API) 
  PATCH @join__enumValue(graph: OPEN_API) 
}