
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@transport", "@resolveTo", "@source", "@extraSchemaDefinitionDirective"]
)
{
  query: Query
  
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }



  directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ENUM | ENUM_VALUE | SCALAR | INPUT_OBJECT | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION





enum join__Graph {
  GRAPH @join__graph(name: "Graph", url: "http://localhost:3000/graphql") 
}

directive @transport(
  kind: String!
  subgraph: String!
  location: String!
  headers: [[String]]
  options: TransportOptions
) repeatable on SCHEMA

directive @resolveTo(
  additionalArgs: ResolveToSourceArgs
  filterBy: String
  keyField: String
  keysArg: String
  pubsubTopic: String
  requiredSelectionSet: String
  result: String
  resultType: String
  sourceArgs: ResolveToSourceArgs
  sourceFieldName: String
  sourceName: String
  sourceSelectionSet: String
  sourceTypeName: String
) on FIELD_DEFINITION

directive @source(name: String!, type: String, subgraph: String!)  repeatable on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

scalar TransportOptions @join__type(graph: GRAPH) 

scalar ResolveToSourceArgs @join__type(graph: GRAPH) 

scalar _DirectiveExtensions @join__type(graph: GRAPH) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{kind: "http", subgraph: "Graph", location: "http://localhost:3000/graphql", headers: [["Authorization", "{context.headers['authorization']}"]], options: {}}]}
) @join__type(graph: GRAPH)  {
  hello: Greeting @inaccessible
  api: apiQuery! @resolveTo(sourceName: "Graph", sourceTypeName: "Query", sourceFieldName: "__typename") 
}

type apiQuery @join__type(graph: GRAPH)  {
  hello: Greeting @resolveTo(sourceName: "Graph", sourceTypeName: "Query", sourceFieldName: "hello") 
}

interface Greeting @join__type(graph: GRAPH)  {
  message: String!
}
    